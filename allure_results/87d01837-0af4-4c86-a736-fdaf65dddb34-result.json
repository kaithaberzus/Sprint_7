{"name": "Проверка текста ответа при логине курьера с отсутствующим паролем", "status": "broken", "statusDetails": {"message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "self = <Response [504]>, kwargs = {}, encoding = 'utf-8'\n\n    def json(self, **kwargs):\n        r\"\"\"Decodes the JSON response body (if any) as a Python object.\n    \n        This may return a dictionary, list, etc. depending on what is in the response.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n>                   return complexjson.loads(self.content.decode(encoding), **kwargs)\n                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n..\\Skript1\\.venv\\Lib\\site-packages\\requests\\models.py:965: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\json\\__init__.py:346: in loads\n    return _default_decoder.decode(s)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\json\\decoder.py:345: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x000001520973F4D0>, s = 'Service unavailable', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\json\\decoder.py:363: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_login_courier.TestLoginCourier object at 0x000001520D0862C0>\n\n    @allure.title('Проверка текста ответа при логине курьера с отсутствующим паролем')\n    def test_login_courier_text_message_no_password(self):\n        data_with_generate = DataWithGenerate()\n        login = LoginCourier()\n        registrate_courier = RegistrateCourier()\n        data = data_with_generate.courier_missing_data()\n        registrate_courier.registrate_courier(data)\n>       response, status_code, courier_id = login.login_courier(data)\n                                            ^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests\\test_login_courier.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nmethods\\login_courier.py:12: in login_courier\n    courier_id = login.json().get('id')\n                 ^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [504]>, kwargs = {}, encoding = 'utf-8'\n\n    def json(self, **kwargs):\n        r\"\"\"Decodes the JSON response body (if any) as a Python object.\n    \n        This may return a dictionary, list, etc. depending on what is in the response.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n>                   raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE                   requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n..\\Skript1\\.venv\\Lib\\site-packages\\requests\\models.py:973: JSONDecodeError"}, "steps": [{"name": "Регистрация курьера", "status": "passed", "parameters": [{"name": "data", "value": "{'login': 'enough'}"}], "start": 1753517529838, "stop": 1753517530067}, {"name": "Логин курьера", "status": "broken", "statusDetails": {"message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n", "trace": "  File \"C:\\Users\\k9609\\PycharmProjects\\Skript1\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\k9609\\PycharmProjects\\Sprint_7\\methods\\login_courier.py\", line 12, in login_courier\n    courier_id = login.json().get('id')\n                 ~~~~~~~~~~^^\n  File \"C:\\Users\\k9609\\PycharmProjects\\Skript1\\.venv\\Lib\\site-packages\\requests\\models.py\", line 973, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n"}, "parameters": [{"name": "data", "value": "{'login': 'enough'}"}], "start": 1753517530067, "stop": 1753517590325}], "start": 1753517529838, "stop": 1753517590330, "uuid": "4217da03-49d9-406e-a41e-571ea4ffb403", "historyId": "06a0a4922413158b760ac072bd3249b7", "testCaseId": "06a0a4922413158b760ac072bd3249b7", "fullName": "tests.test_login_courier.TestLoginCourier#test_login_courier_text_message_no_password", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login_courier"}, {"name": "subSuite", "value": "TestLoginCourier"}, {"name": "host", "value": "DESKTOP-SMQKODA"}, {"name": "thread", "value": "13768-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login_courier"}]}